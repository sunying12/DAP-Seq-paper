setwd ("/Carnegie/DPB/Data/Shared/Labs/Dinneny/Private/Ysun/2020/results/upset/customized_upset_plots")

---
title: "Customized_upset_plot"
author: "Chenxin Li"
date: "2/18/2020"
output: 
  html_notebook:
  number_sections: yes
toc: yes
toc_float: yes
html_document:
  toc: yes
---
  
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#Dependencies 
If you have Tidyverse and cowplot you are mostly covered. If you want to save plot as .svg you will need the R package svglite. If you are using Mac, you need to install XQuart. Link = https://www.xquartz.org/ 
  ```{r}
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(readxl)
library(stringr)
library(svglite)  
library(cowplot)
```


#data
```{r}
#don't for get to set working directory! 
# 3HR
data1_full <- read_csv("./data_RNA/data1.csv") #At3HR 
data2_full <- read_csv("./data_RNA/data2.csv") #Si3HR
data3_full <- read_csv("./data_RNA/data3.csv") #Sp3HR
data4_full <- read_csv("./data_RNA/data4.csv") #Es3HR
# 324R
data1_full <- read_csv("./data_RNA/data5.csv") #At24HR 
data2_full <- read_csv("./data_RNA/data6.csv") #Si24HR
data3_full <- read_csv("./data_RNA/data7.csv") #Sp24HR
data4_full <- read_csv("./data_RNA/data8.csv") #Es24HR
# 3HS
data1_full <- read_csv("./data_RNA/data9.csv") #At3HS
data2_full <- read_csv("./data_RNA/data10.csv") #Si3HS
data3_full <- read_csv("./data_RNA/data11.csv") #Sp3HS
data4_full <- read_csv("./data_RNA/data12.csv") #Es3HS
# 24HS
data1_full <- read_csv("./data_RNA/data13.csv") #At24HS 
data2_full <- read_csv("./data_RNA/data14.csv") #Si24HS
data3_full <- read_csv("./data_RNA/data15.csv") #Sp24HS
data4_full <- read_csv("./data_RNA/data16.csv") #Es24HS



#These are 4 different small RNA datasets. 
#data from Li et al. 2020. https://www.ncbi.nlm.nih.gov/pubmed/31896557 
#1st column = genome location. This is what we'll find intersection for 
#2nd column = their small RNA relative abundance (expression), in units of RPM
#last col = cell type
#we'll ignore the rest of the columns. 
```

```{r}
#let's rename the columns to match the code 
#or you can edit the code to match your colnames 
#we'll use the location col to find intersections first
#We'll worry about their expression in different cell types later 

data1 <- data1_full %>% 
  mutate(elements = location) %>% 
  select(elements)

data2 <- data2_full %>% 
  mutate(elements = location) %>% 
  select(elements)

data3 <- data3_full %>% 
  mutate(elements = location) %>% 
  select(elements)

data4 <- data4_full %>% 
  mutate(elements = location) %>% 
  select(elements)
```

#find specifics 
You can write a loop or something (apply or something in purr) to achieve all these 
```{r}
find_specific <- function(set1, against){
  set1 %>% 
    filter(elements %in% against$elements == F) #In your data, the col name won't be "element". Change it here. 
}
```

```{r}
data1_specific <- data1 %>% 
  find_specific(against = rbind(data2, data3, data4))

data2_specific <- data2 %>% 
  find_specific(against = rbind(data1, data3, data4))

data3_specific <- data3 %>% 
  find_specific(against = rbind(data1, data2, data4))

data4_specific <- data4 %>% 
  find_specific(against = rbind(data1, data2, data3))
```

```{r}
ndata1_spec <- data1_specific %>% nrow()
ndata2_spec <- data2_specific %>% nrow()
ndata3_spec <- data3_specific %>% nrow()
ndata4_spec <- data4_specific %>% nrow()

#the above 2 chunks can be simplied by adding %>% nrow() to the find_specifc function. 
#However, if you want examine the elements in each intersections, I'd recommend take nrow() later 
```


#find overlaps 
```{r}
find_2way <- function(set1, set2){
  set1 %>% 
    filter(set1$elements %in% set2$elements)  #In your data, the col name won't be "element". Change it here. 
  
} 
```

```{r}
data1by2 <- find_2way(data1, data2)
data1by3 <- find_2way(data1, data3)
data1by4 <- find_2way(data1, data4)

data2by3 <- find_2way(data2, data3)
data2by4 <- find_2way(data2, data4)

data3by4 <- find_2way(data3, data4)
```

```{r}
ndata1by2 <- nrow(data1by2)
ndata1by3 <- nrow(data1by3)
ndata1by4 <- nrow(data1by4)

ndata2by3 <- nrow(data2by3)
ndata2by4 <- nrow(data2by4)

ndata3by4 <- nrow(data3by4)
```

```{r}
find_3way <- function(set1, set2, set3){
  set1 %>% 
    filter(set1$elements %in% set2$elements) %>%  #In your data, the col name won't be "element". Change it here. 
    filter(elements %in% set3$elements) 
}
```

```{r}
data1by2by3 <- find_3way(data1, data2, data3)
data2by3by4 <- find_3way(data2, data3, data4)
data3by4by1 <- find_3way(data3, data4, data1)
data4by1by2 <- find_3way(data4, data1, data2)
```

```{r}
ndata1by2by3 <- data1by2by3 %>% nrow()
ndata2by3by4 <- data2by3by4 %>% nrow()
ndata3by4by1 <- data3by4by1 %>% nrow()
ndata4by1by2 <- data4by1by2 %>% nrow()
```


```{r}
#the highest order of overlap in this example is 4-way intersection, 
#which is commonly the largest in most of the Venn Diagrams I've seen. 
#You can go further beyond w/ upset plots if you like. 

data1by2by3by4 <- data1 %>% 
  filter(elements %in% data2$elements) %>% 
  filter(elements %in% data3$elements) %>% 
  filter(elements %in% data4$elements)

ndata1by2by3by4 <- data1by2by3by4 %>% nrow()
```

#total set size
```{r}
total <- data.frame(
  "sets" = c("data1", "data2", "data3", "data4"),
  "sizes" = c(nrow(data1), nrow(data2), nrow(data3), nrow(data4))
)

total #this will be the basis for the upperleft bar plot 
```


```{r}
upperleft <- total %>% 
  ggplot(aes(x = sets, y= sizes)) +
  geom_hline(yintercept = -Inf, size = 1.5) +
  geom_vline(xintercept = -Inf, size = 1.5) +
  geom_bar(stat = "identity", aes(fill = sets), alpha = 0.8) +
  geom_text(aes(label = as.character(sizes)), size = 5, angle = 90, hjust = 0, y = 1, fontface = "bold") +
  scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen4", "darkslategray1" , "blue"), #this is my own custom palette  
                    limits = c("data1", "data2", "data3", "data4")) +              #feel free to use something else     
  scale_x_discrete(labels = NULL) +
  scale_y_continuous(labels = NULL) +
  labs(x = NULL,
       y = "set size") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black", angle = 45, hjust = 1)) +
  theme(axis.text.y=element_text(colour = "black")) +
  theme(panel.grid = element_blank()) 

upperleft
```

#overlap matrix
```{r}
sets <- c("1", "2", "3", "4")
category <- c(
  "data1_specific",
  "data2_specific",
  "data3_specific",
  "data4_specific",
  "data1by2", 
  "data1by3",
  "data1by4",
  "data2by3",
  "data2by4",
  "data3by4",
  "data1by2by3",
  "data2by3by4",
  "data3by4by1",
  "data4by1by2",
  "data1by2by3by4" 
)

overlap_matrix <- expand.grid(  #generate all the combinations 
  "sets" = sets,
  "category" = category
) %>% 
  as.data.frame()  %>%    #determine the intersection: a character col of Y or N. 
  mutate(intersect = case_when(
    str_detect(category, sets %>% as.character()) ~ "Y",
    T ~ "N"
  ))  

overlap_matrix
#this will be the bais for lower left plot 
```

```{r}
lowerleft <- overlap_matrix %>% 
  mutate(category = factor(rev(category))) %>% #in the colored matrix the first y value apprears in the bottom, 
  #so the order need to be reversed 
  ggplot(aes(x = sets, y = category))+
  geom_tile(aes(fill = sets, alpha = intersect), color = "black", size = 1.5) +
  scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen4", "darkslategray1" , "blue"),
                    limits = c("1", "2", "3", "4")) +
  scale_alpha_manual(values = c(0.8, 0),  #color the grid for Y, don't color for N. 
                     limits = c("Y", "N")) +
  scale_y_discrete(labels = NULL) +
  scale_x_discrete(labels = rep(" ", length(sets))) + #I left white space here for better alignment w/ extended plots 
  labs(x = " ", #white space for better alignment w/ right side plots 
       y = "overlap") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black")) +
  theme(axis.text.y=element_text(colour = "black")) +
  theme(panel.grid = element_blank())

lowerleft
```

#produce the legend 
the legend will show up at upper right 
```{r}
#This time we want the legend to be actually something, not just data1 thru data4
upperright <- get_legend(
  total %>% 
    mutate(sample_type = case_when( #make a new column call sample type 
      sets == "data1" ~ "At3HR",     #make dataset back to its cell type 
      sets == "data2" ~ "Si3HR",
      sets == "data3" ~ "Sp3HR",
      sets == "data4" ~ "Es3HR"
    )) %>% 
    mutate(sample_type = factor(sample_type, levels = c(
      "At3HR", "Si3HR", "Sp3HR", "Es3HR"   #order the cell types so that they will line up w/ other plots 
    ))) %>% 
    ggplot(aes(x = sample_type, y= sizes)) +  #now x = sample_type 
    geom_hline(yintercept = -Inf, size = 1.5) +
    geom_vline(xintercept = -Inf, size = 1.5) +
    geom_bar(stat = "identity", aes(fill = sets), alpha = 0.8) +
    geom_text(aes(label = as.character(sizes)), size = 5, angle = 90, hjust = 0, y = 1, fontface = "bold") +
    scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen4", "darkslategray1" , "blue"), #this is my own custom palette  
                      limits = c("At3HR", "Si3HR", "Sp3HR", "Es3HR")) +   #change legend text here!     
    scale_x_discrete(labels = NULL) +
    scale_y_continuous(labels = NULL) +
    labs(x = NULL,
         y = "set size",
         fill = NULL) +  #cell types should be self-explanatory 
    theme_minimal() +
    theme(legend.position = "right") +
    theme(text = element_text(size= 18, face="bold")) +
    theme(axis.text.x=element_text(colour = "black", angle = 45, hjust = 1)) +
    theme(axis.text.y=element_text(colour = "black")) +
    theme(panel.grid = element_blank()) 
)

#same code as upper left, but w/ legend.position = right to get the legend   
plot_grid(upperright)
```

#lowerright  
```{r}
overlap_sizes <- data.frame(
  "overlap_sizes" = c(ndata1_spec, ndata2_spec, ndata3_spec, ndata4_spec, 
                      ndata1by2, ndata1by3, ndata1by4, ndata2by3, ndata2by4, ndata3by4, 
                      ndata1by2by3, ndata2by3by4, ndata3by4by1, ndata4by1by2,
                      ndata1by2by3by4),
  "category" = category 
) %>% 
  mutate(category = factor(category, levels = rev(category)))   #again order needs to be reversed 

overlap_sizes #this will be the basis for bar plot at the lower right 
```

```{r}
lowerright <- overlap_sizes %>% 
  ggplot(aes(x = category, y = overlap_sizes)) +
  geom_hline(yintercept = -Inf, size = 1.5) +
  geom_vline(xintercept = -Inf, size = 1.5) +
  geom_bar(stat = "identity", fill = "grey80", color = NA, alpha = 0.8) +
  geom_text(aes(label = overlap_sizes, y = 0), size = 5, hjust = 0, vjust = 0.5, fontface = "bold") +
  scale_y_continuous(breaks = c(0, max(overlap_sizes$overlap_sizes)) ,
                     labels = rep(" ", 2)) + #I left white space here for better alignment w/ extended plots
  scale_x_discrete(labels = NULL) +
  labs(y = "intersect. sizes",
       x = NULL) +
  theme_minimal() +
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black", angle = 45, hjust = 1)) +
  theme(axis.text.y=element_text(colour = "black")) +
  theme(panel.grid = element_blank()) + 
  coord_flip()

lowerright
```


#put them all together
```{r}
plot_grid(upperleft, upperright, lowerleft, lowerright, 
          nrow = 2, 
          ncol = 2,
          rel_heights = c(1, 4), #the more rows in the lower part, the longer it should be
          rel_widths = c(1, 0.8))

ggsave("upset_full_example.svg", height = 7, width = 3.5) #this should be a tall & skinny plot 
#I prefer .svg, but you can also save as phd or png 
#I will open up the .svg file and mannually adjust the size until it's good
#check that nothing is cut off from the plot 
#png is for twitter posting 
ggsave("upset_full_example.png", height = 7, width = 3.5)
```

#subsetting the inserctions
Say you are only interested in the overlaps w/ data1 

```{r}
lowerleft_1only <- overlap_matrix %>% 
  filter(str_detect(category, "by1|data1")) %>% #subset out things that overlaps w/ data1 
  mutate(category = factor(rev(category))) %>%
  ggplot(aes(x = sets, y = category))+
  geom_tile(aes(fill = sets, alpha = intersect), color = "black", size = 1.5) +
  scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen4", "darkslategray1" , "blue"),
                    limits = c("1", "2", "3", "4")) +
  scale_alpha_manual(values = c(0.8, 0),
                     limits = c("Y", "N")) +
  scale_y_discrete(labels = NULL) +
  scale_x_discrete(labels = rep(" ", length(sets))) +
  labs(x = " ", #I left a white space here so that it will be better aligned w/ the bar plot next to it 
       y = "overlap") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black")) +
  theme(axis.text.y=element_text(colour = "black")) +
  theme(panel.grid = element_blank())

lowerleft_1only
```
```{r}
lowerright_1only <- overlap_sizes %>% 
  filter(str_detect(category, "by1|data1")) %>% #subset out things that overlaps w/ data1 
  ggplot(aes(x = category, y = overlap_sizes)) +
  geom_hline(yintercept = -Inf, size = 1.5) +
  geom_vline(xintercept = -Inf, size = 1.5) +
  geom_bar(stat = "identity", fill = "grey80", color = NA, alpha = 0.8) +
  geom_text(aes(label = overlap_sizes, y = 0), size = 5, hjust = 0, vjust = 0.5, fontface = "bold") +
  scale_y_continuous(breaks = c(0, max(overlap_sizes$overlap_sizes)) ,
                     labels = rep(" ", 2)) + #I left white space here for better alignment w/ extended plots 
  scale_x_discrete(labels = NULL) +
  labs(y = "intersect. sizes",
       x = NULL) +
  theme_minimal() +
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black", angle = 45, hjust = 1)) +
  theme(axis.text.y=element_text(colour = "black")) +
  theme(panel.grid = element_blank()) + 
  coord_flip()

lowerright_1only
```
```{r}
plot_grid(upperleft, upperright, lowerleft_1only, lowerright_1only, 
          nrow = 2, 
          ncol = 2,
          rel_heights = c(1, 2.5), #this time the lower part can be shorter because there're less rows 
          rel_widths = c(0.9, 1))

ggsave("upset_1only.svg", height = 4.5, width = 3.5) #this time the plot can be shorter 
#the best aspect ratio is when the grids in the colored matrix are perfect squares 
ggsave("upset_1only.png", height = 4.5, width = 3.5) 
```


#extensions
the right side of the upset plot can be extended 
this is just an example and you don't have to do this 

This works much better when you don't have any empty sets 
Actually this ONLY works well when you don't have any empty sets 
```{r}
#Do you have any empty sets? 
overlap_sizes %>% filter(overlap_sizes == 0)
```
Say now we want to look at expression of these loci across intersections and across cell types 
```{r}
#we need to bring the expression and cell type info back 
full_data <- data1_full %>%  
  select(location, RPM) %>% 
  full_join(data2_full %>% 
              select(location, RPM), by = "location") %>% 
  full_join(data3_full %>% 
              select(location, RPM), by = "location") %>% 
  full_join(data4_full %>% 
              select(location, RPM), by = "location")

colnames(full_data) <- c("elements", "At3HR", "Si3HR", "Sp3HR", "Es3HR") 
#you just have to change the colnames back to cell types by order

head(full_data)

full_data_long <- full_data %>% 
  gather("sample_type", "RPM", 2:5)
```


```{r}
intersection_data <- rbind(
  data1_specific %>% 
    mutate(category = "data1_specific"), 
  data2_specific %>% 
    mutate(category = "data2_specific"), 
  data3_specific %>% 
    mutate(category = "data3_specific"), 
  data4_specific %>% 
    mutate(category = "data4_specific"), 
  data1by2 %>% 
    mutate(category = "data1by2"),
  data1by3 %>% 
    mutate(category = "data1by3"),
  data1by4 %>% 
    mutate(category = "data1by4"),
  data2by3 %>% 
    mutate(category = "data2by3"),
  data2by4 %>% 
    mutate(category = "data2by4"),
  data3by4 %>% 
    mutate(category = "data3by4"),
  data1by2by3 %>% 
    mutate(category = "data1by2by3"),
  data2by3by4 %>% 
    mutate(category = "data2by3by4"),
  data3by4by1 %>% 
    mutate(category = "data3by4by1"),
  data4by1by2 %>% 
    mutate(category = "data4by1by2"),
  data1by2by3by4 %>% 
    mutate(category = "data1by2by3by4")
) %>% 
  full_join(full_data_long, by = "elements") %>% 
  rbind(overlap_sizes %>% 
    filter(overlap_sizes == 0) %>% 
    mutate(elements = NA) %>% 
    mutate(RPM = NA) %>% 
    select(elements, category, RPM)) %>%    #this is the workaround for empty sets)
  mutate(category = factor(category, levels = rev(c(
    "data1_specific","data2_specific", "data3_specific", "data4_specific",
    "data1by2", "data1by3", "data1by4",
    "data2by3", "data2by4", "data3by4",
    "data1by2by3", "data2by3by4", "data3by4by1", "data4by1by2",
    "data1by2by3by4"
  )))) 

head(intersection_data) 
```


```{r}
farright_plot <- intersection_data %>% 
  mutate(sample_type = factor(sample_type, levels = c(
    "At3HR", "Si3HR", "Sp3HR", "Es3HR" 
  ))) %>% 
  filter(is.na(category) == F) %>% 
  ggplot(aes(x = category, y = log10(RPM + 1))) +
  facet_grid(.~ sample_type, switch = "both") +
  geom_hline(yintercept = -Inf, size = 1.5) +
  geom_vline(xintercept = -Inf, size = 1.5) +
  geom_boxplot(aes(fill = sample_type), outlier.shape  = NA, width = 0.7, alpha = 0.8) +
   scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen4", "darkslategray1" , "blue"),   
                     #limits = c("At3HR", "Si3HR", "Sp3HR", "Es3HR")) +   #change legend text here! 
theme_minimal()+
  scale_y_continuous() +
  scale_x_discrete(labels = NULL) +
  labs(y = "log10(RPM + 1)",
       x = NULL) +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(strip.text = element_blank()) + 
  theme(text = element_text(size= 18, face="bold")) +
  theme(axis.text.x=element_text(colour = "black")) +
  theme(axis.text.y=element_text(colour = "black")) +
  coord_flip()

farright_plot

#in your actual data you can color the boxes or dots w/ factors of interest 
```
```{r}
#If you have empty sets the alignment won't be correct 

plot_grid(upperleft, upperright, NULL, 
          lowerleft, lowerright, farright_plot,  
          nrow = 2, 
          ncol = 3,
          rel_heights = c(1, 3),  
          rel_widths = c(0.8, 0.8, 2)) #the more stuff on the right, the thinner the left side has to be. 

ggsave("upset_extended_example.svg", height = 7, width = 8) #this time the plot needs to be wider
ggsave("upset_extended_example.png", height = 7, width = 8) 
```




Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
